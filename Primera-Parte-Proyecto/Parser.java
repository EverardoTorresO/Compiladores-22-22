/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
        public class Parser implements ParserConstants {
                public static void main (String[] args) throws ParseException{
                Parser anLex = new Parser(System.in);
                anLex.unaExpresion();
                System.out.println("Analisis Terminado.");
                }

  final public void unaExpresion() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASS:{
        jj_consume_token(CLASS);
        break;
        }
      case PUBLIC:{
        jj_consume_token(PUBLIC);
        break;
        }
      case STATIC:{
        jj_consume_token(STATIC);
        break;
        }
      case VOID:{
        jj_consume_token(VOID);
        break;
        }
      case MAIN:{
        jj_consume_token(MAIN);
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
        break;
        }
      case RETURN:{
        jj_consume_token(RETURN);
        break;
        }
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        break;
        }
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
        break;
        }
      case FLOAT:{
        jj_consume_token(FLOAT);
        break;
        }
      case IF:{
        jj_consume_token(IF);
        break;
        }
      case ELSE:{
        jj_consume_token(ELSE);
        break;
        }
      case WHILE:{
        jj_consume_token(WHILE);
        break;
        }
      case TRUE:{
        jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
        break;
        }
      case THIS:{
        jj_consume_token(THIS);
        break;
        }
      case NEW:{
        jj_consume_token(NEW);
        break;
        }
      case SOUT:{
        jj_consume_token(SOUT);
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        break;
        }
      case OLLAVE:{
        jj_consume_token(OLLAVE);
        break;
        }
      case CLLAVE:{
        jj_consume_token(CLLAVE);
        break;
        }
      case OPARENT:{
        jj_consume_token(OPARENT);
        break;
        }
      case CPARENT:{
        jj_consume_token(CPARENT);
        break;
        }
      case ORECT:{
        jj_consume_token(ORECT);
        break;
        }
      case CRECT:{
        jj_consume_token(CRECT);
        break;
        }
      case NUMFLOTANTE:{
        jj_consume_token(NUMFLOTANTE);
        break;
        }
      case NUMINT:{
        jj_consume_token(NUMINT);
        break;
        }
      case OPSUM:{
        jj_consume_token(OPSUM);
        break;
        }
      case OPSUB:{
        jj_consume_token(OPSUB);
        break;
        }
      case OPMULTI:{
        jj_consume_token(OPMULTI);
        break;
        }
      case OPDIV:{
        jj_consume_token(OPDIV);
        break;
        }
      case OPMAY:{
        jj_consume_token(OPMAY);
        break;
        }
      case OPMEN:{
        jj_consume_token(OPMEN);
        break;
        }
      case PUN:{
        jj_consume_token(PUN);
        break;
        }
      case COM:{
        jj_consume_token(COM);
        break;
        }
      case PUNCOM:{
        jj_consume_token(PUNCOM);
        break;
        }
      case EQUAL:{
        jj_consume_token(EQUAL);
        break;
        }
      case EQUIV:{
        jj_consume_token(EQUIV);
        break;
        }
      case CHAR:{
        jj_consume_token(CHAR);
        break;
        }
      case ID:{
        jj_consume_token(ID);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASS:
      case CHAR:
      case PUBLIC:
      case STATIC:
      case MAIN:
      case STRING:
      case EXTENDS:
      case BOOLEAN:
      case ELSE:
      case IF:
      case INT:
      case FLOAT:
      case RETURN:
      case VOID:
      case WHILE:
      case TRUE:
      case FALSE:
      case THIS:
      case NEW:
      case SOUT:
      case OPSUM:
      case OPSUB:
      case OPMULTI:
      case OPDIV:
      case OPMEN:
      case OPMAY:
      case EQUAL:
      case EQUIV:
      case PUNCOM:
      case PUN:
      case COM:
      case OPARENT:
      case CPARENT:
      case ORECT:
      case CRECT:
      case OLLAVE:
      case CLLAVE:
      case NOT:
      case ID:
      case NUMINT:
      case NUMFLOTANTE:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
}

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xcbfffffe,0xcbfffffe,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x79ff,0x79ff,};
	}

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[58];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 2; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 58; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
