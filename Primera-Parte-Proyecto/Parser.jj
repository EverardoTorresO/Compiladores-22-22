options{
	IGNORE_CASE = true;
	STATIC = false;
	DEBUG_PARSER = false;
	DEBUG_LOOKAHEAD = false;
	DEBUG_TOKEN_MANAGER = false;
	SANITY_CHECK = true;
	UNICODE_INPUT = true;
}
PARSER_BEGIN(Parser)
	public class Parser{
		public static void main (String[] args) throws ParseException{
		Parser anLex = new Parser(System.in);
		anLex.unaExpresion();
		System.out.println("Analisis Terminado.");
		}
}
PARSER_END(Parser)


// TOKENS
/**Palabras Reservadas**/
TOKEN:{
<CLASS:"class">{System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<CHAR:"char">{System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<PUBLIC:"public">{System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<STATIC:"static">{System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<MAIN:"main">{System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<STRING:"String">{System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<EXTENDS:"extends">{System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<BOOLEAN:"boolean">{System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
}
TOKEN:
{
<ELSE: "else"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<IF: "if"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<INT: "int"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<FLOAT: "float"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<RETURN: "return"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<VOID: "void"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<WHILE: "while"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<TRUE: "true"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<FALSE: "false"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<THIS: "this"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<NEW: "new"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<SOUT: "System.out.println"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
}

TOKEN:
{
<OPSUM: "+"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OPSUB: "-"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OPMULTI: "*"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OPDIV: "/"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OPMEN: "<"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OPMENEQ: "<="> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OPMAY: ">"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OPMAYEQ: ">="> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<NOEQ: "!="> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<EQUAL: "="> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<EQUIV: "=="> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<PUNCOM: ";"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<PUN: "."> {System.out.println("Linea: "+matchedToken.beginLine+", Columna: "+matchedToken.beginColumn+". "+"Punto decimal: "+image);}
|
<COM: ","> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OPARENT: "("> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<CPARENT: ")"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<ORECT: "["> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<CRECT: "]"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OLLAVE: "{"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<CLLAVE: "}"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<AND: "&&"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OR: "||"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<NOT: "!"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
}

TOKEN:
{
<ID: (["a"-"z","A"-"Z"]|["_"]) (["a"-"z","A"-"Z"]| ["_"] | ["0"-"9"])* > {System.out.println("Linea: "+matchedToken.beginLine+". "+"ID: "+image);}
|
<NUMINT: (["0"-"9"])+> {System.out.println("Linea: "+matchedToken.beginLine+". "+"NUMINT: "+image);}
|
<NUMFLOTANTE:  <NUMINT>"."<NUMINT>> {System.out.println("Linea: "+matchedToken.beginLine+". "+"NUMFLOTANTE: "+image);}
}


// SKIP SPECIAL_TOKEN

SKIP:
{
" " | "\t" | "\n" | "\r"
}

MORE:
{
"/*" : COMENTARIO
}

<COMENTARIO> MORE:
{
<~[]>
}

<COMENTARIO> SKIP:
{
"*/" : DEFAULT 
}

SKIP:
{
<~[]>{System.out.println("ERROR: CHARACTER NO VALIDO -> "+image);}
}

SPECIAL_TOKEN:
{
< "."(["0"-"9"])+ | (["0"-"9"])+"." >{System.out.println("ERROR: FLOTANTE NO VALIDO -> " + image + " <-" + " Linea: " + matchedToken.beginLine);}
|
//Que  contenga _
< (["0"-"9"])+( ["a"-"z", "A"-"Z"] |["_"]) ( ["a"-"z", "A"-"Z", "0"-"9"] | ["_"])* >{System.out.println("ERROR: Identificador no puede comenzar con numero -> " + image + " <-" + " Linea: " + matchedToken.beginLine);}
|
<COMENTARIO_LINEA: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}
void unaExpresion(): {}
{
(<CLASS>|<PUBLIC>|<STATIC>| <VOID>|<MAIN>| <STRING>|<RETURN>|<EXTENDS>| <INT> |<BOOLEAN>| <FLOAT> |<IF>|<ELSE>|<WHILE>|<TRUE>|<FALSE>|<THIS>|<NEW>|<SOUT>|<NOT>
| <OLLAVE> | <CLLAVE> | <OPARENT> | <CPARENT> | <ORECT> | <CRECT> |<NUMFLOTANTE>|<NUMINT>
| <OPSUM> | <OPSUB> | <OPMULTI> | <OPDIV> | <OPMAY> | <OPMEN> | <PUN> | <COM> | <PUNCOM> | <EQUAL> | <EQUIV>
|<CHAR> | <ID> )
+ <EOF>
}


